package com.dcap.filters;

import com.dcap.service.threads.FilterData;
import com.dcap.fileReader.DataFile;
import com.dcap.service.threads.FilterData;

import java.util.List;
import java.util.Map;

/**
 * Abstract class for all changing filters, i. e. that change a given file and preserve the structure of the file.
 * The changing can mean to alter the values of a column, but also to insert a new column
 *
 * @author uli
 */

public class AbstractChangingFilter extends AbstractDataFilter{

    /**
     * Field to store the information, if there was chnanged the count of the columns
     */
    private Boolean columnCountChanged=false;


    protected Boolean toPreprocess = true;

    /**
     * Construtctor for the AbstratctChangingFilter
     * @param name the name of the filter
     * @param columns map that contains the list of all strings that must be considerated, value is the name of the column in the experiment, the
     *                key is the name of the column in the csv file
     */
    public AbstractChangingFilter(String name,Map<String, String> columns,  Map<String, String> parameter) {
        super(name, columns, parameter);
    }

    /**
     * returns the description of the parameters that are needed as input. Returns the mame of the parameter as key and the type as value
     * @return list of required parameters
     */
    @Override
    public Map<String, ENUMERATED_TYPES> getRequiredParameters() {
        return null;
    }

    /**
     * Runs the filter.
     *
     *  @param data
     *            list of Filterdatata to be processed
     * @return additional information generated by the filter to be displayed to the user.
     * @throws Exception
     *             if something goes wrong
     */
    @Override
    public List<FilterData> run(List<FilterData> data) throws Exception {
        return null;
    }

    @Override
    public Boolean isPreprocessing() {
        return toPreprocess;
    }

    /**
     * function that informs if the count of columns is changed
     * @return true if the count changed, false in the other case
     */
    public Boolean isColumnCountChanged(){
        return columnCountChanged;
    }

    /**
     * sets the field {@link #columnCountChanged}
     * @param flag value for the value
     */
    protected void setColumnsCountChanged(Boolean flag){
        this.columnCountChanged=flag;
    }
}
